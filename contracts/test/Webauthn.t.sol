// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.24;

import { Test } from "forge-std/Test.sol";
import { console2 } from "forge-std/console2.sol";
import { Webauthn256r1SignerLib } from "../src/Libraries/WebauthnSigner.sol";
import { WebauthnVerifier256r1 } from "../src/Webauthn/WebauthnVerifier256r1.sol";

contract WebauthnTest is Test {
  event WebauthnSignerAdded(bytes32 credIdHash);

  WebauthnVerifier256r1 verifier;

  function setUp() external {
    verifier = new WebauthnVerifier256r1();
  }

  function test_Should_Revert_Setting_Zero_Signer() public {
    vm.expectRevert();
    Webauthn256r1SignerLib.setSigner(bytes32(0), 0, 0);
  }

  function test_Should_Find_Signer(
    bytes32 credIdHash,
    uint256 qX,
    uint256 qY
  ) public {
    vm.assume(credIdHash != bytes32(0));
    vm.assume(qX > 0);
    vm.assume(qY > 0);

    vm.expectEmit(true, false, false, false);
    emit WebauthnSignerAdded(credIdHash);

    Webauthn256r1SignerLib.setSigner(credIdHash, qX, qY);

    Webauthn256r1SignerLib.Webauthn256r1Signer
      memory signer = Webauthn256r1SignerLib.getSigner(credIdHash);

    assertEq(signer.credIdHash, credIdHash);
    assertEq(signer.qX, qX);
    assertEq(signer.qY, qY);
  }

  function test_Should_Not_Find_Signer(bytes32 credIdHash) public {
    vm.expectRevert();
    Webauthn256r1SignerLib.getSigner(credIdHash);
  }

  function test_Should_Parse_Signature() public {
    bytes
      memory sig = hex"4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001e05eeb467d2e01a93c278665262fcec5d8fd9181052a81f6f94bfdd01aaf037fcf00000000000000000000000000000000000000000000000000000000000000270efbec632baf85ff5228c8c2bbe849cd01a35a96fd7ece0888f5b70d871df17401e6d9b85bf7cbe2267a8cb2a347f5901fc59788dafcc6a06350e40c730af2d6f4a19843f202d80062b74cf76360f2b78a4ec203640632fb1f048064d1a0a78000000000000000000000000000000000000000000000000000000000000000a449960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97634500000000adce000235bcc60a648b0b25f1f0550300203150fed76d9f9e802162236fd45540f7765b22d9702ff17a4584a9368cfcd88ca501020326200121582057959ef891d217cdddedcc776880298057c933067bb4730e7508f6606d1018dc225820864b17cc21b46029f589e9a7a69c44987231211c9a9882df241d9279a4d5e9150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000897b2274797065223a22776562617574686e2e637265617465222c226368616c6c656e6765223a2258757447665334427154776e686d556d4c383746325032526751557167666235535f335147713844663838222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a31323334222c2263726f73734f726967696e223a66616c73657d0000000000000000000000000000000000000000000000";
    (
      bytes1 authenticatorDataFlagMask,
      bytes memory authenticatorData,
      bytes memory clientData,
      bytes32 clientChallenge,
      uint256 clientChallengeOffset,
      uint256 r,
      uint256 s,
      bytes32 credIdHash
    ) = Webauthn256r1SignerLib.parseSignature(sig);

    assertTrue(authenticatorDataFlagMask == 0x45);
    assertTrue(
      keccak256(authenticatorData) ==
        keccak256(
          hex"49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97634500000000adce000235bcc60a648b0b25f1f0550300203150fed76d9f9e802162236fd45540f7765b22d9702ff17a4584a9368cfcd88ca501020326200121582057959ef891d217cdddedcc776880298057c933067bb4730e7508f6606d1018dc225820864b17cc21b46029f589e9a7a69c44987231211c9a9882df241d9279a4d5e915"
        )
    );
    assertTrue(
      keccak256(clientData) ==
        keccak256(
          hex"7b2274797065223a22776562617574686e2e637265617465222c226368616c6c656e6765223a2258757447665334427154776e686d556d4c383746325032526751557167666235535f335147713844663838222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a31323334222c2263726f73734f726967696e223a66616c73657d"
        )
    );
    assertTrue(
      clientChallenge ==
        0x5eeb467d2e01a93c278665262fcec5d8fd9181052a81f6f94bfdd01aaf037fcf
    );
    assertTrue(clientChallengeOffset == 39);
    assertTrue(
      r ==
        6777489979198301216485251453388201817091590933220750354093579120125463622004
    );
    assertTrue(
      s ==
        860190322755091168481838589787052489251956556721595044274474831378228376278
    );
    assertTrue(
      credIdHash ==
        0xf4a19843f202d80062b74cf76360f2b78a4ec203640632fb1f048064d1a0a780
    );
  }

  function test_Should_Verify_Signature() public {
    bytes
      memory sig = hex"4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001e05eeb467d2e01a93c278665262fcec5d8fd9181052a81f6f94bfdd01aaf037fcf00000000000000000000000000000000000000000000000000000000000000270efbec632baf85ff5228c8c2bbe849cd01a35a96fd7ece0888f5b70d871df17401e6d9b85bf7cbe2267a8cb2a347f5901fc59788dafcc6a06350e40c730af2d6f4a19843f202d80062b74cf76360f2b78a4ec203640632fb1f048064d1a0a78000000000000000000000000000000000000000000000000000000000000000a449960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97634500000000adce000235bcc60a648b0b25f1f0550300203150fed76d9f9e802162236fd45540f7765b22d9702ff17a4584a9368cfcd88ca501020326200121582057959ef891d217cdddedcc776880298057c933067bb4730e7508f6606d1018dc225820864b17cc21b46029f589e9a7a69c44987231211c9a9882df241d9279a4d5e9150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000897b2274797065223a22776562617574686e2e637265617465222c226368616c6c656e6765223a2258757447665334427154776e686d556d4c383746325032526751557167666235535f335147713844663838222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a31323334222c2263726f73734f726967696e223a66616c73657d0000000000000000000000000000000000000000000000";

    Webauthn256r1SignerLib.setSigner(
      0xf4a19843f202d80062b74cf76360f2b78a4ec203640632fb1f048064d1a0a780,
      0x57959ef891d217cdddedcc776880298057c933067bb4730e7508f6606d1018dc,
      0x864b17cc21b46029f589e9a7a69c44987231211c9a9882df241d9279a4d5e915
    );

    assertEq(
      Webauthn256r1SignerLib.validateSignature(
        address(verifier),
        sig,
        keccak256("bite"),
        false
      ),
      0
    );
  }

  function test_Should_Not_Verify_Signature(
    bytes32 credIdHash,
    uint256 qX,
    uint256 qY
  ) public {
    vm.assume(credIdHash != bytes32(0));
    vm.assume(qX > 0);
    vm.assume(qY > 0);

    Webauthn256r1SignerLib.setSigner(credIdHash, qX, qY);
    bytes memory sig = abi.encode(
      bytes1(0x45),
      hex"49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97634500000000adce000235bcc60a648b0b25f1f0550300203150fed76d9f9e802162236fd45540f7765b22d9702ff17a4584a9368cfcd88ca501020326200121582057959ef891d217cdddedcc776880298057c933067bb4730e7508f6606d1018dc225820864b17cc21b46029f589e9a7a69c44987231211c9a9882df241d9279a4d5e915",
      hex"7b2274797065223a22776562617574686e2e637265617465222c226368616c6c656e6765223a2258757447665334427154776e686d556d4c383746325032526751557167666235535f335147713844663838222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a31323334222c2263726f73734f726967696e223a66616c73657d",
      bytes32(
        0x5eeb467d2e01a93c278665262fcec5d8fd9181052a81f6f94bfdd01aaf037fcf
      ),
      uint256(39),
      uint256(
        6777489979198301216485251453388201817091590933220750354093579120125463622004
      ),
      uint256(
        860190322755091168481838589787052489251956556721595044274474831378228376278
      ),
      credIdHash
    );

    assertEq(
      Webauthn256r1SignerLib.validateSignature(
        address(verifier),
        sig,
        keccak256("bite"),
        false
      ),
      1
    );
  }
}
